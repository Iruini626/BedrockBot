AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  TelegramBedrockBot

  A serverless interface between Telegram and Bedrock.

Globals:
  Function:
    Timeout: 90
    Runtime: python3.13
    Architectures:
      - x86_64
    CodeUri: functions/
    MemorySize: 512
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON

Resources:
  # EventBridge
  EventBusLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/events/${AWS::StackName}"
  
  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: TelegramBedrockBotEventBus

  EventBusLog:
    Type: AWS::Events::Rule
    Properties:
      Name: BusLogging
      EventBusName: !Ref EventBus
      State: ENABLED
      EventPattern:
        # Match all events
        account:
          - !Sub ${AWS::AccountId}
      Targets:
        - Id: EventBusLog
          Arn: !GetAtt EventBusLogGroup.Arn

  # Rest API
  TelegramBedrockAPIRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "apigateway.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: WriteEventBridge
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action:
                - events:PutEvents
              Effect: Allow
              Resource:
                - !GetAtt EventBus.Arn

  TelegramBedrockAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: TelegramBedrockBotAPI
      StageName: prod
      TracingEnabled: true
      EndpointConfiguration: EDGE
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: TelegramBedrockBotAPI
        paths:
          /:
            post:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  description: OK
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: POST
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:events:action/PutEvents"
                requestTemplates:
                  application/json: !Sub |
                    #set($context.requestOverride.header.X-Amz-Target = "AWSEvents.PutEvents")
                    #set($context.requestOverride.header.Content-Type = "application/x-amz-json-1.1")
                    #set($body = $util.parseJson($input.body))
                    #set($inputRoot= $input.path('$'))
                    {
                        "Entries":[{
                            "Detail": "$util.escapeJavaScript($input.body).replaceAll("\\'","'")",
                            "EventBusName":"${EventBus}",
                            "Source":"telegram-bot",
                            "DetailType":"json"
                            #if($body.message.entities && $body.message.entities[0].type == "bot_command")
                            ,"Resources":["$body.message.entities[0].type"]
                            #else
                            ,"Resources":[""]
                            #end
                            }]
                    }
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: when_no_match
                credentials: !GetAtt TelegramBedrockAPIRole.Arn
  
  # S3 Store for Config and History
  ChatStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['',[!Ref 'AWS::AccountId','-bedrockstore']]

  
  # Functions
  BedrockConfigSetterFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Set the config for the Bedrock bot
      Handler: setConfig.lambda_handler
      Environment:
        Variables:
          BUCKET_NAME: !Ref ChatStoreBucket
          BOT_TOKEN: 8073759396:AAFZQOzXGsyc6VZ90ZKUp5gzohj8TYqG0MU
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ChatStoreBucket
      Events:
        EventBridge:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBus
            RuleName: config
            Pattern:
              source: 
                - telegram-bot
              resources: 
                - bot_command
              detail-type:
                - json

  BedrockConverseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Converse with Bedrock
      Handler: main.lambda_handler
      Environment:
        Variables:
          BUCKET_NAME: !Ref ChatStoreBucket
          BOT_TOKEN: 8073759396:AAFZQOzXGsyc6VZ90ZKUp5gzohj8TYqG0MU
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ChatStoreBucket
        - Statement:
          - Effect: Allow
            Action:
            - bedrock:*
            Resource: '*'
      Events:
        EventBridge:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBus
            RuleName: converse
            Pattern:
              source: 
                - telegram-bot
              resources:
                - ""
              detail-type:
                - json
              detail:
                message:
                  chat:
                    username:
                      - Iruini626
                      - minyil26
                      - jestarz
                      - ongxc
